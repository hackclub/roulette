---
import Layout from '../../layouts/Layout.astro';
import LinkButton from "../../components/LinkButton.astro";
import InlineArrow from "../../components/InlineArrow.astro";
import { requireUser, redirectToLogin } from '../../lib/auth.js';
import { getCurrentRound } from '../../lib/data.js';
import { getUserRound, getUserBySlackId } from '../../lib/airtable.js';

export const prerender = false;

// Get user data
let userData;
let currentRound;
let wagerData = null;

try {
  userData = await requireUser(Astro.request.headers);
  currentRound = getCurrentRound();
  const slackId = userData.fields.slackId;
  
  // Fetch wager data directly from Airtable instead of API call
  try {
    if (slackId) {
      const userRound = await getUserRound(slackId, currentRound);
      const user = await getUserBySlackId(slackId);
      
      if (userRound && user) {
        wagerData = {
          wagerChoice: userRound.fields.wagerChoice,
          wagerAmount: userRound.fields.wagerAmount,
          currentChips: user.fields.chips,
          currentRespins: user.fields.respinTokens || 0,
          targetHours: getTargetHours(userRound.fields.wagerChoice),
          spinCamera: userRound.fields.spinCamera || 'â€”',
          spinGameplay: userRound.fields.spinGameplay || 'â€”',
          spinSetting: userRound.fields.spinSetting || 'â€”'
        };
      }
    }
  } catch (error) {
    console.error('Failed to fetch wager data:', error);
  }
} catch (error) {
  return Astro.redirect('/');
}

// Helper function to calculate target hours
function getTargetHours(wagerChoice) {
  const multiplierToHours = { '1.5x': 5, '2x': 10, '3x': 25 };
  return multiplierToHours[wagerChoice] || 0;
}

// Extract wager information
const wagerChoice = wagerData?.wagerChoice || '1.5x';
const wagerAmount = wagerData?.wagerAmount || 0;
const currentChips = wagerData?.currentChips || 0;
const currentRespins = wagerData?.currentRespins || 0;
const targetHours = wagerData?.targetHours || 0;
---

<Layout>
  <main>
    <a href="/spin"><InlineArrow reversed pink /> back to dashboard</a>

    <div class="submission-container">
      <h1>submit your round</h1>

      <form id="submission-form">
        <div class="form-section">
          <label for="game-name">game name</label>
          <input type="text" id="game-name" name="game-name" class="styled-input" placeholder="enter your game name..." required>
        </div>

        <div class="form-section">
          <label for="game-description">game description</label>
          <textarea id="game-description" name="game-description" class="styled-textarea" placeholder="describe what you built..." required></textarea>
        </div>

        <div class="form-section">
          <label for="game-screenshot">game screenshot url</label>
          <input type="url" id="game-screenshot" name="game-screenshot" class="styled-input" placeholder="https://github.com/.../screenshot.png">
          <div id="screenshot-preview" class="screenshot-preview" style="display: none;">
            <img id="preview-image" alt="Screenshot preview">
            <button type="button" id="remove-screenshot" class="remove-btn">Ã— remove</button>
          </div>
          <p class="help-text">put your screenshot in your github repo, then right click and copy image address to paste here</p>
        </div>

        <div class="form-section">
          <label for="github-url">github url</label>
          <input type="url" id="github-url" name="github-url" class="styled-input" placeholder="https://github.com/..." required>
        </div>

        <div class="form-section">
          <label for="playable-url">playable url</label>
          <input type="url" id="playable-url" name="playable-url" class="styled-input" placeholder="https://..." required>
        </div>

        <div class="form-section">
          <label for="hackatime-projects">select hackatime projects</label>
          <div class="hackatime-container">
            <input type="text" id="project-search" class="styled-input search-input" placeholder="search projects...">
            <div class="projects-list">
              <div id="projects-loading" class="projects-loading">
                <p>Loading hackatime projects...</p>
              </div>
              <div id="projects-content" class="projects-content" style="display: none;">
                <!-- Projects will be populated here -->
              </div>
              <div id="projects-error" class="projects-error" style="display: none;">
                <p>Failed to load projects. Please refresh the page.</p>
              </div>
            </div>
          </div>
        </div>

        <div class="form-section">
          <label for="theme-justification">theme justification</label>
          <div class="theme-justification-container">
            <div class="spins-display">
              <p class="spins-label">your spins were:</p>
              <div class="spins-list">
                <span class="spin-item">camera: <strong>{wagerData?.spinCamera || 'â€”'}</strong></span>
                <span class="spin-item">gameplay: <strong>{wagerData?.spinGameplay || 'â€”'}</strong></span>
                <span class="spin-item">setting: <strong>{wagerData?.spinSetting || 'â€”'}</strong></span>
              </div>
            </div>
            <div class="justification-input">
              <label for="theme-explanation">explain how your game links to the themes given</label>
              <textarea id="theme-explanation" name="theme-explanation" class="styled-textarea" placeholder="describe how your game connects to the camera, gameplay, and setting themes you spun... (it's ok if it's a bit off â€” as long as you tried!)" required></textarea>
            </div>
          </div>
        </div>

        <div class="form-section">
          <label for="additional-hours">additional hours</label>
          <div class="additional-hours-container">
            <div class="hours-input-row">
              <input type="number" id="hours-number" name="hours-number" class="styled-input hours-input" placeholder="0" min="0" step="0.5">
              <span class="hours-label">hours</span>
            </div>
            <textarea id="hours-description" name="hours-description" class="styled-textarea" placeholder="describe what you worked on..."></textarea>
            
            <div class="justification-links">
              <label for="justification-links">justification links (github repo links to proofs, journals, etc.)</label>
              <div id="justification-links-container">
                <div class="link-input-row">
                  <input type="url" class="styled-input justification-link" placeholder="https://github.com/.../proof1.pdf">
                  <button type="button" class="remove-link-btn">Ã—</button>
                </div>
              </div>
              <button type="button" id="add-justification-link" class="add-link-btn">+ add another link</button>
              <p class="help-text">put your proof files (PDFs, screenshots, etc.) into your github repo and paste the links here!</p>
            </div>
          </div>
        </div>

        <div class="form-section">
          <div class="combined-summary">
            <h3>total hours & rewards</h3>
            <div class="summary-content">
              <div class="hours-section">
                <div><span class="total-amount">0h</span> / <span class="target-display">{targetHours > 0 ? `${targetHours}h` : 'â€”'}</span> target</div>
                <div class="breakdown-details">(0 hackatime Â· 0 self-reported)</div>
              </div>
              
              <div class="expected-rewards">
                <p>once you submit, you will get:</p>
                <div class="rewards-breakdown">
                  <span class="chips-reward" data-wager-choice={wagerChoice} data-wager-amount={wagerAmount} data-current-chips={currentChips}>
                    <span class="chips-text">calculating...</span> (<span id="chips-total">{currentChips}</span> total)
                  </span> 
                  <span class="respin-reward" data-current-respins={currentRespins}>
                    <span class="respin-text">+ 0 respin tokens</span> (<span id="respin-total">{currentRespins}</span> total)
                  </span>
                </div>
              </div>
              
              <div class="lifeline-info">
                <p class="lifeline-title">ðŸ’¡ lifeline system</p>
                <p class="lifeline-description">even if you don't hit your target hours, submitting your game will give you some chips back to help you keep playing!</p>
                <div class="lifeline-details">
                  <span class="lifeline-chips">minimum chips after submission: <strong>10</strong></span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="form-actions" style="align-items: center;">
          <span><a href="/spin" class="cancel-btn">cancel</a></span>
          <button type="submit" id="submit-btn" class="button linkbutton">submit round</button>
        </div>
      </form>
    </div>
  </main>
</Layout>

<script define:vars={{ wagerData }}>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('project-search');
    const projectsLoading = document.getElementById('projects-loading');
    const projectsContent = document.getElementById('projects-content');
    const projectsError = document.getElementById('projects-error');
    
    let hackatimeProjects = []; // Store projects data for calculations

    // Function to fetch and display projects
    async function fetchProjects() {
      projectsLoading.style.display = 'block';
      projectsContent.style.display = 'none';
      projectsError.style.display = 'none';

      try {
        // First get user data and round info from our server
        const userResponse = await fetch('/api/hackatime-projects', {
          credentials: 'include',
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (!userResponse.ok) {
          throw new Error(`Failed to get user data: ${userResponse.status}`);
        }
        
        const userData = await userResponse.json();
        
        if (!userData.slackId || !userData.roundStartDate) {
          throw new Error('Missing user data or round information');
        }

        // Now make the actual Hackatime API call from the client
        const hackatimeUrl = `https://hackatime.hackclub.com/api/v1/users/${userData.slackId}/stats?features=projects&start_date=${userData.roundStartDate}`;
        
        const hackatimeResponse = await fetch(hackatimeUrl, {
          headers: { 
            'Accept': 'application/json'
          }
        });

        if (!hackatimeResponse.ok) {
          if (hackatimeResponse.status === 429) {
            throw new Error('Hackatime API rate limit exceeded. Please wait a minute and try again.');
          } else if (hackatimeResponse.status === 404) {
            throw new Error('No projects found for this user/round.');
          } else {
            throw new Error(`Hackatime API error (${hackatimeResponse.status}). Please try again later.`);
          }
        }

        const hackatimeData = await hackatimeResponse.json();

        if (!hackatimeData?.data?.projects) {
          projectsContent.innerHTML = '<p class="no-projects">No projects found for this round</p>';
          projectsContent.style.display = 'block';
          return;
        }

        const projects = hackatimeData.data.projects;
        
        if (projects.length > 0) {
          hackatimeProjects = projects; // Store projects data
          projectsContent.innerHTML = ''; // Clear previous content
          projects.forEach((project, index) => {
            const projectItem = document.createElement('div');
            projectItem.className = 'project-item';
            
            // Create elements safely without innerHTML
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = `project-${index}`;
            checkbox.name = 'hackatime-projects';
            checkbox.value = project.name || project.id || `project-${index}`;
            checkbox.dataset.hours = project.hours || 0;
            checkbox.dataset.minutes = project.minutes || 0;
            
            const label = document.createElement('label');
            label.htmlFor = `project-${index}`;
            label.textContent = `${project.name || `Project ${index + 1}`} (${project.text || 'No description'})`;
            
            projectItem.appendChild(checkbox);
            projectItem.appendChild(label);
            projectsContent.appendChild(projectItem);
          });
          projectsContent.style.display = 'block';
          
          // Add event listeners to new checkboxes
          addProjectCheckboxListeners();
        } else {
          projectsContent.innerHTML = '<p class="no-projects">No projects found for this round</p>';
          projectsContent.style.display = 'block';
        }
      } catch (error) {
        console.error('Failed to fetch hackatime projects:', error);
        
        // Show specific error message
        if (error.message.includes('rate limit')) {
          projectsError.innerHTML = `
            <p>${error.message}</p>
            <button type="button" id="retry-fetch" class="retry-btn">Retry</button>
          `;
          
          // Add retry functionality
          const retryBtn = projectsError.querySelector('#retry-fetch');
          retryBtn.addEventListener('click', () => {
            fetchProjects();
          });
        } else {
          projectsError.innerHTML = `<p>${error.message}</p>`;
        }
        projectsError.style.display = 'block';
      } finally {
        projectsLoading.style.display = 'none';
      }
    }

    // Initial fetch
    fetchProjects();

    // Search functionality
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase().trim();
      const projectItems = document.querySelectorAll('.project-item');
      
      projectItems.forEach(item => {
        const label = item.querySelector('label');
        const projectName = label.textContent.toLowerCase();
        
        if (projectName.includes(searchTerm)) {
          item.style.display = 'flex';
        } else {
          item.style.display = 'none';
        }
      });
    });

    // Screenshot preview functionality
    const screenshotInput = document.getElementById('game-screenshot');
    const previewContainer = document.getElementById('screenshot-preview');
    const previewImage = document.getElementById('preview-image');
    const removeBtn = document.getElementById('remove-screenshot');

    screenshotInput.addEventListener('input', (e) => {
      const url = e.target.value.trim();
      if (url && isValidImageUrl(url)) {
        previewImage.src = url;
        previewContainer.style.display = 'block';
      } else {
        previewContainer.style.display = 'none';
      }
    });

    function isValidImageUrl(url) {
      try {
        const urlObj = new URL(url);
        return urlObj.protocol === 'https:' && /\.(png|jpg|jpeg|gif|webp)$/i.test(urlObj.pathname);
      } catch {
        return false;
      }
    }

    removeBtn.addEventListener('click', () => {
      screenshotInput.value = '';
      previewContainer.style.display = 'none';
      previewImage.src = '';
    });

    // Justification links handling
    const addLinkBtn = document.getElementById('add-justification-link');
    const linksContainer = document.getElementById('justification-links-container');

    addLinkBtn.addEventListener('click', () => {
      const linkRow = document.createElement('div');
      linkRow.className = 'link-input-row';
      linkRow.innerHTML = `
        <input type="url" class="styled-input justification-link" placeholder="https://github.com/.../proof.pdf">
        <button type="button" class="remove-link-btn">Ã—</button>
      `;
      
      // Add remove functionality to new row
      const removeBtn = linkRow.querySelector('.remove-link-btn');
      removeBtn.addEventListener('click', () => {
        linkRow.remove();
      });
      
      linksContainer.appendChild(linkRow);
    });

    // Add remove functionality to initial row
    const initialRemoveBtn = linksContainer.querySelector('.remove-link-btn');
    initialRemoveBtn.addEventListener('click', () => {
      const linkRow = initialRemoveBtn.closest('.link-input-row');
      if (linksContainer.children.length > 1) {
        linkRow.remove();
      }
    });

    // Total hours calculation
    const totalAmountSpan = document.querySelector('.total-amount');
    const breakdownDetailsSpan = document.querySelector('.breakdown-details');
    const hoursInput = document.getElementById('hours-number');

    function updateTotalHours() {
      let hackatimeTotalMinutes = 0;
      let selfReportedTotalMinutes = 0;

      // Calculate hackatime minutes from selected projects
      const projectCheckboxes = document.querySelectorAll('input[name="hackatime-projects"]:checked');
      projectCheckboxes.forEach(checkbox => {
        const projectIndex = parseInt(checkbox.id.replace('project-', ''));
        const project = hackatimeProjects[projectIndex];
        if (project) {
          const projectHours = parseFloat(project.hours) || 0;
          const projectMinutes = parseFloat(project.minutes) || 0;
          // Convert hours to minutes and add the minutes field
          const totalProjectMinutes = Math.round(projectHours * 60) + projectMinutes;
          hackatimeTotalMinutes += totalProjectMinutes;
        }
      });

      // Get self-reported hours and convert to minutes
      const selfReportedHours = parseFloat(hoursInput.value) || 0;
      selfReportedTotalMinutes = Math.round(selfReportedHours * 60);

      // Calculate total minutes
      const totalMinutes = hackatimeTotalMinutes + selfReportedTotalMinutes;

      // Convert back to hours and minutes for display
      const totalHours = Math.floor(totalMinutes / 60);
      const totalRemainingMinutes = totalMinutes % 60;

      // Format display strings
      const hackatimeHours = Math.floor(hackatimeTotalMinutes / 60);
      const hackatimeMinutes = hackatimeTotalMinutes % 60;
      const selfReportedHoursDisplay = Math.floor(selfReportedTotalMinutes / 60);
      const selfReportedMinutes = selfReportedTotalMinutes % 60;

      // Update total display
      if (totalRemainingMinutes > 0) {
        totalAmountSpan.textContent = `${totalHours}h ${totalRemainingMinutes}min`;
      } else {
        totalAmountSpan.textContent = `${totalHours}h`;
      }

      // Update breakdown display
      let hackatimeDisplay = '';
      if (hackatimeMinutes > 0) {
        hackatimeDisplay = `${hackatimeHours}h ${hackatimeMinutes}min`;
      } else {
        hackatimeDisplay = `${hackatimeHours}h`;
      }

      let selfReportedDisplay = '';
      if (selfReportedMinutes > 0) {
        selfReportedDisplay = `${selfReportedHoursDisplay}h ${selfReportedMinutes}min`;
      } else {
        selfReportedDisplay = `${selfReportedHoursDisplay}h`;
      }

      breakdownDetailsSpan.textContent = `(${hackatimeDisplay} hackatime Â· ${selfReportedDisplay} self-reported)`;

      // Update submission summary when hours change
      updateSubmissionSummary();
    }

    // Update submission summary with wager and reward information
    function updateSubmissionSummary() {
      
      // Get wager data from server-side (stored in data attributes)
      const chipsReward = document.querySelector('.chips-reward');
      const respinReward = document.querySelector('.respin-reward');
      const chipsTotalSpan = document.getElementById('chips-total');
      const respinTotalSpan = document.getElementById('respin-total');
      
      // Extract wager data from data attributes
      const wagerChoice = chipsReward.dataset.wagerChoice || '1.5x';
      const wagerAmount = parseInt(chipsReward.dataset.wagerAmount) || 0;
      const currentChips = parseInt(chipsReward.dataset.currentChips) || 0;
      const currentRespins = parseInt(respinReward.dataset.currentRespins) || 0;
      
      // Get current total hours and target hours
      const currentHoursText = document.querySelector('.total-amount').textContent;
      const currentHours = parseFloat(currentHoursText.replace('h', '').replace('min', '')) || 0;
      const targetHours = parseFloat(document.querySelector('.target-display').textContent.replace('h', '')) || 0;
      const hoursAboveTarget = Math.max(0, currentHours - targetHours);
      const expectedRespins = Math.floor(hoursAboveTarget / 3);
      
      // Calculate expected chips based on hours vs target
      if (currentHours >= targetHours) {
        // Calculate expected chips (wager amount Ã— multiplier)
        const multiplierValues = { '1.5x': 1.5, '2x': 2, '3x': 3 };
        const multiplier = multiplierValues[wagerChoice] || 1.5;
        const expectedChips = Math.round(wagerAmount * multiplier);
        
        // Update the chips-text span instead of the entire chipsReward
        const chipsText = chipsReward.querySelector('.chips-text');
        if (chipsText) {
          chipsText.textContent = `${expectedChips} chips`;
        }
        chipsTotalSpan.textContent = currentChips + expectedChips;
      } else {
        // Calculate lifeline chips (bring user up to 10 chips minimum)
        const lifelineChips = Math.max(0, 10 - currentChips);
        
        // Update the chips-text span to show lifeline chips
        const chipsText = chipsReward.querySelector('.chips-text');
        if (chipsText) {
          if (targetHours > 0) {
            chipsText.textContent = `+ ${lifelineChips} lifeline chips`;
          } else {
            // If no target hours set, show default chips calculation
            const multiplierValues = { '1.5x': 1.5, '2x': 2, '3x': 3 };
            const multiplier = multiplierValues[wagerChoice] || 1.5;
            const expectedChips = Math.round(wagerAmount * multiplier);
            chipsText.textContent = `${expectedChips} chips`;
          }
        }
        chipsTotalSpan.textContent = currentChips + lifelineChips;
      }
      
      // Update respin tokens
      const respinText = respinReward.querySelector('.respin-text');
      if (respinText) {
        respinText.textContent = `+ ${expectedRespins} respin tokens`;
      }
      respinTotalSpan.textContent = currentRespins + expectedRespins;
    }

    // Add event listeners for real-time updates
    function addProjectCheckboxListeners() {
      const projectCheckboxes = document.querySelectorAll('input[name="hackatime-projects"]');
      projectCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
          updateTotalHours();
          // Only update summary if elements exist
          if (document.getElementById('chips-total')) {
            updateSubmissionSummary();
          }
        });
      });
    }

    // Add listener to hours input
    hoursInput.addEventListener('input', () => {
      updateTotalHours();
      // Only update summary if elements exist
      if (document.getElementById('chips-total')) {
        updateSubmissionSummary();
      }
    });

    // Add listeners to existing checkboxes and set up observer for dynamic content
    addProjectCheckboxListeners();

    // Set up mutation observer to handle dynamically added checkboxes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          addProjectCheckboxListeners();
          // Only update summary if elements exist
          if (document.getElementById('chips-total')) {
            updateSubmissionSummary();
          }
        }
      });
    });

    const projectsList = document.querySelector('.projects-list');
    if (projectsList) {
      observer.observe(projectsList, { childList: true });
    }

    // Initial calculation
    updateTotalHours();

    // Update submission summary immediately and also with delay as backup
    updateSubmissionSummary();
    setTimeout(() => {
      updateSubmissionSummary();
    }, 100);

    // Form submission handling
    const form = document.getElementById('submission-form');
    const submitBtn = document.getElementById('submit-btn');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Validate required fields
      const requiredFields = [
        'game-name', 'game-description', 'github-url', 'playable-url', 'theme-explanation'
      ];

      let isValid = true;
      const missingFields = [];

      requiredFields.forEach(fieldName => {
        const field = document.querySelector(`[name="${fieldName}"]`);
        if (!field.value.trim()) {
          isValid = false;
          const displayName = fieldName === 'theme-explanation' ? 'theme explanation' : fieldName.replace('-', ' ');
          missingFields.push(displayName);
        }
      });

      // Check if user has either hackatime projects OR additional hours
      const selectedProjects = document.querySelectorAll('input[name="hackatime-projects"]:checked');
      const additionalHours = parseFloat(document.getElementById('hours-number').value) || 0;
      
      const hasHackatimeProjects = selectedProjects.length > 0;
      const hasAdditionalHours = additionalHours > 0;
      
      if (!hasHackatimeProjects && !hasAdditionalHours) {
        isValid = false;
        missingFields.push('either hackatime projects or additional hours');
      }

      // Only require hours description if additional hours are entered
      if (hasAdditionalHours) {
        const hoursDescription = document.getElementById('hours-description').value.trim();
        if (!hoursDescription) {
          isValid = false;
          missingFields.push('hours description');
        }
      }

      if (!isValid) {
        alert(`Please fill in all required fields: ${missingFields.join(', ')}`);
        return;
      }

      // Collect form data
      const formData = {
        gameName: document.getElementById('game-name').value.trim(),
        gameDescription: document.getElementById('game-description').value.trim(),
        githubUrl: document.getElementById('github-url').value.trim(),
        playableUrl: document.getElementById('playable-url').value.trim(),
        hoursDescription: document.getElementById('hours-description').value.trim(),
        totalHours: document.querySelector('.total-amount').textContent,
        hackatimeProjects: Array.from(selectedProjects).map(project => project.value),
        hackatimeProjectDetails: Array.from(selectedProjects).map(project => {
          const projectIndex = parseInt(project.id.replace('project-', ''));
          return hackatimeProjects[projectIndex] || { name: project.value, hours: 0, minutes: 0 };
        }),
        additionalHours: additionalHours,
        screenshotUrl: document.getElementById('game-screenshot').value.trim() || '',
        justificationLinks: Array.from(document.querySelectorAll('.justification-link'))
          .map(input => input.value.trim())
          .filter(link => link.length > 0),
        themeExplanation: document.getElementById('theme-explanation').value.trim(),
        spinCamera: wagerData?.spinCamera || 'â€”',
        spinGameplay: wagerData?.spinGameplay || 'â€”',
        spinSetting: wagerData?.spinSetting || 'â€”'
      };

      // Disable submit button and show loading state
      submitBtn.disabled = true;
      submitBtn.textContent = 'submitting...';

      try {
        const response = await fetch('/api/submit-project', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(formData)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `Failed to submit: ${response.status}`);
        }

        const result = await response.json();
        
        // Success - redirect to spin page
        alert('Project submitted successfully!');
        window.location.href = '/spin';
        
      } catch (error) {
        console.error('Error submitting project:', error);
        alert(`Failed to submit project: ${error.message}`);
        
        // Re-enable submit button
        submitBtn.disabled = false;
        submitBtn.textContent = 'submit round';
      }
    });
  });
</script>

<style>
  main {
    padding: 40px;
    max-width: 800px;
    margin: 0 auto;
  }

  .submission-container {
    margin-top: 40px;
  }

  h1 {
    color: var(--pink);
    margin-bottom: 32px;
    text-align: center;
  }

  .form-section {
    margin-bottom: 24px;
  }

  input, textarea {
    box-sizing: border-box;
  }

  label {
    display: block;
    color: var(--pink);
    font-weight: 600;
    margin-bottom: 8px;
    font-size: 1.1em;
  }

  .styled-dropdown,
  .styled-input,
  .styled-textarea {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid var(--pink);
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.8);
    color: var(--pink);
    font-size: 0.85em;
    transition: all 0.2s ease;
  }

  .styled-dropdown:focus,
  .styled-input:focus,
  .styled-textarea:focus {
    outline: none;
    border-color: #ff8aa3;
    box-shadow: 0 0 0 3px rgba(255, 105, 138, 0.1);
  }

  .styled-dropdown option {
    background: #000;
    color: var(--pink);
  }

  .styled-textarea {
    min-height: 120px;
    resize: vertical;
    font-family: inherit;
  }

  .styled-file-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px dashed var(--pink);
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.4);
    color: var(--pink);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .styled-file-input:hover {
    border-color: #ff8aa3;
    background: rgba(0, 0, 0, 0.6);
  }

  .help-text {
    margin-top: 8px;
    font-size: 0.9em;
    opacity: 0.8;
    color: var(--pink);
  }

  .form-actions {
    display: flex;
    gap: 16px;
    justify-content: center;
    margin-top: 24px;
  }

  .form-actions button[type="submit"] {
    margin: 32px 0;
    box-sizing: border-box;
    position: relative;
    background-color: var(--pink);
    color: var(--black);
    text-decoration: none;
    border: none;
    border-radius: 16px;
    padding: 8px 24px;
    font-size: inherit;
    font-weight: 600;
    cursor: pointer;
    transition: 0.05s ease-in-out;
    box-shadow:
      6px 4px 0 0px var(--black),
      8px 2px 0 0px var(--pink),
      8px 6px 0 0px var(--pink),
      6px 6px 0 0px var(--pink);
    left: 0px;
    top: 0px;
  }

  .form-actions button[type="submit"]:hover {
    box-shadow: none;
    left: 8px;
    top: 6px;
  }

  .form-actions button[type="submit"]:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  .form-actions button[type="submit"]:disabled:hover {
    box-shadow:
      6px 4px 0 0px var(--black),
      8px 2px 0 0px var(--pink),
      8px 6px 0 0px var(--pink),
      6px 6px 0 0px var(--pink);
    left: 0px;
    top: 0px;
  }

  .cancel-btn {
    background: transparent;
    color: var(--pink);
    border: 2px solid var(--pink);
    padding: 8px 24px;
    
    border-radius: 16px;
    font-size: inherit;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-block;
  }

  .cancel-btn:hover {
    background: var(--pink);
    color: #000;
    transform: translateY(-2px);
  }

  .cancel-btn:active {
    transform: translateY(0);
  }

  /* Hackatime projects container */
  .hackatime-container {
    border: 2px solid var(--pink);
    border-radius: 8px;
    padding: 16px;
    background: rgba(0, 0, 0, 0.4);
  }

  .search-input {
    margin-bottom: 12px;
  }

  .projects-list {
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid rgba(255, 105, 138, 0.3);
    border-radius: 6px;
    padding: 8px;
    background: rgba(0, 0, 0, 0.6);
  }

  .project-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px 0;
    border-bottom: 1px solid rgba(255, 105, 138, 0.1);
  }

  .project-item:last-child {
    border-bottom: none;
  }

  .project-item input[type="checkbox"] {
    width: auto;
    margin: 0;
  }

  .project-item label {
    margin: 0;
    font-size: 0.95em;
    cursor: pointer;
  }

  /* Additional hours container */
  .additional-hours-container {
    border: 2px solid var(--pink);
    border-radius: 8px;
    padding: 16px;
    background: rgba(0, 0, 0, 0.4);
  }

  .hours-input-row {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
  }

  .hours-input {
    width: 120px;
    margin: 0;
  }

  .hours-label {
    color: var(--pink);
    font-weight: 600;
  }

  /* Justification links */
  .justification-links {
    margin-top: 16px;
  }

  .justification-links label {
    display: block;
    color: var(--pink);
    font-weight: 600;
    margin-bottom: 8px;
    font-size: 1em;
  }

  .link-input-row {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
  }

  .justification-link {
    flex: 1;
    margin: 0;
  }

  .remove-link-btn {
    background: transparent;
    color: var(--pink);
    border: 1px solid var(--pink);
    border-radius: 4px;
    width: 24px;
    height: 24px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .remove-link-btn:hover {
    background: var(--pink);
    color: #000;
  }

  .add-link-btn {
    background: transparent;
    color: var(--pink);
    border: 1px solid var(--pink);
    border-radius: 6px;
    padding: 6px 12px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
    margin-top: 8px;
  }

  .add-link-btn:hover {
    background: var(--pink);
    color: #000;
  }

  /* Scrollbar styling */
  .projects-list::-webkit-scrollbar {
    width: 8px;
  }

  .projects-list::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 4px;
  }

  .projects-list::-webkit-scrollbar-thumb {
    background: var(--pink);
    border-radius: 4px;
  }

  .projects-list::-webkit-scrollbar-thumb:hover {
    background: #ff8aa3;
  }

  .no-projects {
    text-align: center;
    color: var(--pink);
    opacity: 0.7;
    font-style: italic;
    padding: 20px;
  }

  /* Projects loading and error states */
  .projects-loading,
  .projects-error {
    text-align: center;
    padding: 20px;
    color: var(--pink);
  }

  .projects-loading p {
    margin: 0;
    opacity: 0.8;
    font-style: italic;
  }

  .projects-error p {
    margin: 0;
    color: #ff6b6b;
    font-weight: 600;
  }

  .retry-btn {
    background: var(--pink);
    color: #000;
    border: none;
    border-radius: 6px;
    padding: 8px 16px;
    margin-top: 12px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .retry-btn:hover {
    background: #ff8aa3;
    transform: translateY(-1px);
  }

  .retry-btn:active {
    transform: translateY(0);
  }

  .projects-content {
    /* Content will be populated dynamically */
  }

  /* Theme justification container */
  .theme-justification-container {
    border: 2px solid var(--pink);
    border-radius: 8px;
    padding: 16px;
    background: rgba(0, 0, 0, 0.4);
  }

  .spins-display {
    margin-bottom: 16px;
    padding: 12px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 6px;
    border: 1px solid rgba(255, 105, 138, 0.3);
  }

  .spins-label {
    margin: 0 0 8px 0;
    color: var(--pink);
    font-weight: 600;
    font-size: 0.95em;
  }

  .spins-list {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .spin-item {
    color: var(--pink);
    font-size: 0.9em;
    opacity: 0.9;
  }

  .spin-item strong {
    color: var(--pink);
    font-weight: 700;
  }

  .justification-input {
    margin-top: 16px;
  }

  .justification-input label {
    margin-bottom: 8px;
    font-size: 1em;
  }

  /* Screenshot preview */
  .screenshot-preview {
    margin-top: 12px;
    border: 2px solid var(--pink);
    border-radius: 8px;
    padding: 16px;
    background: rgba(0, 0, 0, 0.6);
    text-align: center;
  }

  .screenshot-preview img {
    max-width: 100%;
    max-height: 300px;
    border-radius: 6px;
    border: 1px solid rgba(255, 105, 138, 0.3);
    margin-bottom: 12px;
  }

  .remove-btn {
    background: transparent;
    color: var(--pink);
    border: 1px solid var(--pink);
    border-radius: 6px;
    padding: 6px 12px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
  }

  .remove-btn:hover {
    background: var(--pink);
    color: #000;
  }

  /* Combined summary styling */
  .combined-summary {
    border: 2px solid var(--pink);
    border-radius: 8px;
    padding: 20px;
    background: rgba(0, 0, 0, 0.6);
    margin-top: 24px;
    text-align: center;
  }

  .combined-summary h3 {
    margin: 0 0 16px 0;
    color: var(--pink);
    font-size: 1.2em;
  }

  .summary-content {
    flex-direction: column;
    gap: 12px;
  }

  .hours-section {
    flex-direction: column;
    align-items: center;
  }

  .hours-section .total-amount {
    font-size: 2em;
    font-weight: bold;
    color: var(--pink);
  }

  .hours-section .breakdown-details {
    font-size: 1em;
    color: var(--pink);
    opacity: 0.8;
  }

  .hours-comparison .comparison-text {
    color: var(--pink);
    font-size: 1.1em;
    font-weight: 600;
  }

  .hours-comparison .hours-display {
    color: var(--pink);
    font-weight: bold;
  }

  .hours-comparison .target-display {
    color: var(--pink);
    font-weight: bold;
  }

  .expected-rewards p {
    margin-bottom: 12px;
    color: var(--pink);
    font-size: 1em;
    font-weight: 600;
  }

  .rewards-breakdown {
    gap: 8px;
    color: var(--pink);
    font-size: 0.9em;
    opacity: 0.9;
  }

  .chips-reward,
  .respin-reward {
    gap: 8px;
    color: var(--pink);
    font-size: 0.9em;
    opacity: 0.9;
  }

  .chips-reward span,
  .respin-reward span {
    color: var(--pink);
    font-weight: bold;
  }

  /* Lifeline info styling */
  .lifeline-info {
    margin-top: 20px;
    padding: 16px;
    background: rgba(255, 105, 138, 0.1);
    border: 1px solid rgba(255, 105, 138, 0.3);
    border-radius: 8px;
    text-align: center;
  }

  .lifeline-title {
    margin: 0 0 8px 0;
    color: var(--pink);
    font-weight: 600;
    font-size: 1em;
  }

  .lifeline-description {
    margin: 0 0 12px 0;
    color: var(--pink);
    font-size: 0.9em;
    opacity: 0.9;
    line-height: 1.4;
  }

  .lifeline-details {
    margin-top: 8px;
  }

  .lifeline-chips {
    color: var(--pink);
    font-size: 0.9em;
    opacity: 0.8;
  }

  .lifeline-chips strong {
    color: var(--pink);
    font-weight: 700;
  }
</style>
