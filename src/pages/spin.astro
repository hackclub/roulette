---
import InsideLayout from '../layouts/InsideLayout.astro';

import LinkButton from '../components/LinkButton.astro';

import { requireUser, redirectToLogin } from '../lib/auth.js';
import { getUserRound } from '../lib/airtable.js';
import { getCurrentRound, choices } from '../lib/data.js';

let userData;

export const prerender = false;

try {
  userData = await requireUser(Astro.request.headers);

} catch {
  return redirectToLogin();
}

var user = userData.fields;

// Check if user has submitted details by looking for required fields
const hasDetailsSubmitted = Boolean(
  user.firstname && 
  user.lastname && 
  user.birthday && 
  user.githubusername && 
  user.hearabout && 
  user.doingwell && 
  user.improve && 
  user.addr1 && 
  user.city && 
  user.state && 
  user.country && 
  user.zipcode
);

const roundNumber = getCurrentRound();
const round = await getUserRound(user.slackId, roundNumber);
const fields = round?.fields || {};
const pickedCamera = fields.spinCamera || '—';
const pickedGameplay = fields.spinGameplay || '—';
const pickedSetting = fields.spinSetting || '—';
const wagerChoice = fields.wagerChoice || '—';
const wagerAmount = (fields.wagerAmount ?? '—');
const numericWager = typeof wagerAmount === 'number' ? wagerAmount : 0;

const hasCamera = pickedCamera !== '—';
const hasGameplay = pickedGameplay !== '—';
const hasSetting = pickedSetting !== '—';
const hasWager = wagerChoice !== '—';
const respinTokens = Number(user.respinTokens || 0);

// Derive wager display details
const multiplier = typeof wagerChoice === 'string' ? wagerChoice : String(wagerChoice || '—');
const multiplierToHours = { '1.5x': '5h', '2x': '10h', '3x': '25h' };
const hourTarget = multiplierToHours[multiplier] || '—';

// Build result details for hover tooltip
const camInfo = hasCamera ? choices.camera?.[pickedCamera] : null;
const camExKeys = camInfo ? Object.keys(camInfo.examples) : [];
const gameInfo = hasGameplay ? choices.gameplay?.[pickedGameplay] : null;
const gameExKeys = gameInfo ? Object.keys(gameInfo.examples) : [];
const setInfo = hasSetting ? choices.setting?.[pickedSetting] : null;
const setExKeys = setInfo ? Object.keys(setInfo.examples) : [];

let nextHref = '';
let nextLabel = '';
if (!hasCamera && (wagerChoice !== '—')) {
  nextHref = '/spin/camera';
  nextLabel = 'continue: wheel 1 of 3 (camera)';
} else if (hasCamera && !hasGameplay) {
  nextHref = '/spin/gameplay';
  nextLabel = 'continue: wheel 2 of 3 (gameplay)';
} else if (hasCamera && hasGameplay && !hasSetting) {
  nextHref = '/spin/setting';
  nextLabel = 'continue: wheel 3 of 3 (setting)';
}
---

<InsideLayout currentPage="spin">

<div class="mobile-cover">
  <div class="mobile-cover__content">
    <p>sorry, please view roulette on desktop! :(</p>
  </div>
</div>

<main class="desktop-only">
  <section class="topbar">
    <div class="profile">
      <img class="avatar" src={user.avatar} alt="avatar" />
      <span class="username">{user.name}</span>
    </div>
    <div class="stats">
      <span class="stat">
        chips: <strong>{user.chips}</strong>
        <div class="tooltip t-right">
          <p>earn chips by spinning and wagering. cash in chips for prizes!</p>
        </div>
      </span>
      <span class="stat">
        round: <strong>{roundNumber}</strong>
        <div class="tooltip t-right">
          <p>each round lasts 7 days. 4 rounds total. lock in!</p>
        </div>
      </span>
      <span class="stat">
        respin tokens: <strong>{respinTokens}</strong>
        <div class="tooltip t-right">
          <p>use this to try again. gain 1 respin token for every 3 hours worked above your wagered hours.</p>
        </div>
      </span>
    </div>
  </section>


  {!hasWager ? (
    <section class="cta">
      <LinkButton href="/spin/wager">start the round</LinkButton>
    </section>
  ) : (
    <div>
      {!hasCamera && !hasGameplay && !hasSetting ? (
        <section class="cta">
          <LinkButton href={nextHref}>{nextLabel}</LinkButton>
        </section>
      ) : (
        <div>
          <section class="summary">
            <h2>your spins this round</h2>
            <div class="summary-row">
              <div class="summary-card">
                <span class="label">camera</span>
                <span class="value">{pickedCamera}</span>
                {camInfo && (
                  <div class="tooltip">
                    <div class="tip-title">{pickedCamera}</div>
                    <p class="tip-desc">{camInfo.description}</p>
                    <div class="tip-images">
                      {camExKeys.slice(0,4).map((k) => (
                        <img src={camInfo.examples[k]} alt={k} />
                      ))}
                    </div>
                  </div>
                )}
              </div>
              <div class="summary-card">
                <span class="label">gameplay</span>
                <span class="value">{pickedGameplay}</span>
                {gameInfo && (
                  <div class="tooltip">
                    <div class="tip-title">{pickedGameplay}</div>
                    <p class="tip-desc">{gameInfo.description}</p>
                    <div class="tip-images">
                      {gameExKeys.slice(0,4).map((k) => (
                        <img src={gameInfo.examples[k]} alt={k} />
                      ))}
                    </div>
                  </div>
                )}
              </div>
              <div class="summary-card">
                <span class="label">setting</span>
                <span class="value">{pickedSetting}</span>
                {setInfo && (
                  <div class="tooltip">
                    <div class="tip-title">{pickedSetting}</div>
                    <p class="tip-desc">{setInfo.description}</p>
                    <div class="tip-images">
                      {setExKeys.slice(0,4).map((k) => (
                        <img src={setInfo.examples[k]} alt={k} />
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </section>

          <section class="wager-summary">
            <h2>your wager</h2>
            <div class="summary-row">
              <div class="summary-card">
                <span class="label">hour target</span>
                <span class="value">{hourTarget}</span>
              </div>
              <div class="summary-card">
                <span class="label">multiplier</span>
                <span class="value">{multiplier}</span>
              </div>
              <div class="summary-card">
                <span class="label">chips wagered</span>
                <span class="value">{wagerAmount}</span>
              </div>
            </div>
          </section>

          {nextHref ? (
            <section class="cta">
              <LinkButton href={nextHref}>{nextLabel}</LinkButton>
            </section>
          ) : (
            <div>
              <section class="submit" style="padding-top: 40px;">
                {hasDetailsSubmitted ? (
                  <LinkButton href="/spin/submission">submit game for round 1</LinkButton>
                ) : (
                  <div class="submit-disabled">
                    <LinkButton disabled>submit game for round 1</LinkButton>
                    <p class="submit-note">⚠️ complete your details in <a href="/settings">settings</a> first</p>
                  </div>
                )}
              </section>
            </div>
          )}

          {(respinTokens > 0 && (hasWager || hasCamera || hasGameplay || hasSetting)) && (
            <div style="margin-top: 12px; display: flex; gap: 12px; align-items: center; flex-wrap: wrap;">
              <span>respin tokens: <strong>{respinTokens}</strong> - </span>
              <a id="use-respin" class="button linkbutton" href="#" style="margin:0;">use respin token</a>
            </div>
          )}
        </div>
      )}
    </div>
  )}
  
  <p>round 1 ends on friday, 15 august, 9am PST.</p>

  <!-- Respin confirmation modal -->
  <div id="respin-modal" class="modal" aria-hidden="true">
    <div class="modal__content">
      <p>using this token will reset your wager and spin and let you try again. this action cannot be undone.</p>
      <div class="modal__actions">
        <p><a href="#" id="confirm-respin" class="button linkbutton" style="margin:0;">use respin token</a>  ·       
        <a href="#" id="cancel-respin" class="button linkbutton" style="margin:0;">cancel</a></p>
      </div>
    </div>
  </div>
</main>

</InsideLayout>


<style>
main {
  display: flex;
  flex-flow: column;
  justify-content: center;
  height: 100%;
}

.topbar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 16px;
  margin: 8px 0 24px 0;
}

.profile { display: flex; align-items: center; gap: 10px; }
.username { font-weight: 600; }

.stats { display: flex; gap: 20px; }
.stat { position: relative; }
.stat .tooltip {
  display: none;
  position: absolute;
  top: calc(100% + 6px);
  right: 0;
  z-index: 30;
  background: rgba(0,0,0,0.9);
  color: var(--pink);
  border: 2px solid var(--pink);
  border-radius: 10px;
  padding: 8px 10px;
  width: 260px;
}
.stat:hover .tooltip { display: block; }

.cta { margin-top: 16px; }

h2 { margin: 0 0 12px 0; font-size: 1.3em; margin-top: 32px; }

.summary-row {
  display: flex;
  gap: 12px;
  flex-wrap: nowrap;
  justify-content: stretch;
}
.summary-card {
  border: 2px solid var(--pink);
  border-radius: 10px;
  padding: 10px 14px;
  min-width: 220px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: relative;
  width: 100%;
}
.summary-card .label { opacity: 0.85; }
.summary-card .value { font-weight: 700; color: var(--pink); margin-left: 12px; }

.summary-card .tooltip {
  display: none;
  position: absolute;
  top: calc(100% + 8px);
  left: 0;
  z-index: 20;
  background: rgba(0,0,0,0.9);
  border: 2px solid var(--pink);
  border-radius: 10px;
  padding: 10px;
  width: 420px;
}
.summary-card:hover .tooltip { display: block; }
.tip-title { margin: 0 0 6px 0; font-weight: 700; color: var(--pink); }
.tip-desc { margin: 0 0 8px 0; opacity: 0.9; }
.tip-images { display: flex; gap: 6px; flex-wrap: wrap; }
.tip-images img { height: 70px; width: auto; object-fit: cover; border-radius: 6px; border: 1px solid var(--pink); }

/* Modal */
.modal[aria-hidden="true"] { display: none; }
.modal[aria-hidden="false"] {
  position: fixed; inset: 0; z-index: 10000;
  display: flex; align-items: center; justify-content: center;
  background: rgba(0,0,0,0.6);
}
.modal__content {
  background: var(--black);
  color: var(--pink);
  border: 2px solid var(--pink);
  border-radius: 12px;
  padding: 18px;
  max-width: 520px;
}
.modal__actions { display: flex; gap: 12px; margin-top: 12px; }

/* Mobile cover overlay */
.mobile-cover {
  display: none;
  position: fixed;
  inset: 0;
  background: var(--black);
  color: var(--pink);
  z-index: 9999;
  align-items: center;
  justify-content: center;
}
.mobile-cover__content { text-align: center; font-size: 1.2em; padding: 20px; }

/* Details warning */
.details-warning {
  background: rgba(255, 105, 138, 0.1);
  border: 2px solid var(--pink);
  border-radius: 10px;
  padding: 16px;
  margin: 20px 0;
  text-align: center;
}

.details-warning p {
  margin: 0;
  color: var(--pink);
  font-size: 1.1em;
}

.details-warning a {
  color: var(--pink);
  text-decoration: underline;
}

.details-warning a:hover {
  color: #ff8aa3;
}

/* Submit disabled */
.submit-disabled {
  text-align: center;
}

.submit-disabled .submit-note {
  margin-top: 12px;
  color: var(--pink);
  font-size: 0.9em;
}

.submit-disabled .submit-note a {
  color: var(--pink);
  text-decoration: underline;
}

.submit-disabled .submit-note a:hover {
  color: #ff8aa3;
}

/* Responsive behavior: show cover on small screens, hide main */
@media (max-width: 599px) {
  .desktop-only { display: none !important; }
  .mobile-cover { display: flex; }
}
@media (min-width: 600px) {
  .mobile-cover { display: none; }
}
</style>


<script client:load>
  const trigger = document.getElementById('use-respin');
  const modal = document.getElementById('respin-modal');
  const confirmBtn = document.getElementById('confirm-respin');
  const cancelBtn = document.getElementById('cancel-respin');

  function openModal(){ modal?.setAttribute('aria-hidden', 'false'); }
  function closeModal(){ modal?.setAttribute('aria-hidden', 'true'); }

  if (trigger && modal && confirmBtn && cancelBtn) {
    trigger.addEventListener('click', (e) => { e.preventDefault(); openModal(); });
    cancelBtn.addEventListener('click', (e) => { e.preventDefault(); closeModal(); });
    confirmBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      confirmBtn.setAttribute('disabled', 'true');
      confirmBtn.textContent = 'resetting your spin...';
      try {
        const res = await fetch('/api/spin', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ respin: true })
        });
        if (!res.ok) {
          const msg = await res.text();
          alert(msg || 'Respin failed');
          confirmBtn.removeAttribute('disabled');
          confirmBtn.textContent = 'use respin token';
          return;
        }
        window.location.reload();
      } catch (err) {
        console.error('respin error', err);
        alert('Respin failed');
        confirmBtn.removeAttribute('disabled');
        confirmBtn.textContent = 'use respin token';
      }
    });
  }
</script>
