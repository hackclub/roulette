---
import Layout from '../../layouts/Layout.astro';
import LinkButton from '../../components/LinkButton.astro';
import InlineArrow from '../../components/InlineArrow.astro';
import { requireUser, redirectToLogin } from '../../lib/auth.js';

let userData;

export const prerender = false;

try {
  userData = await requireUser(Astro.request.headers);
} catch {
  return redirectToLogin();
}
---

<Layout>
  <main>
    <a href="/settings"><InlineArrow reversed pink /> back to settings</a>
    
    <div class="details-container">
      <h1>submission details</h1>
      <p class="section-description">please provide your details for prize delivery and feedback</p>
      
      <form class="details-form">
        <div class="form-row">
          <div class="form-group">
            <label for="first-name">first name</label>
            <input type="text" id="first-name" name="first-name" class="styled-input" placeholder="orpheus">
          </div>
          <div class="form-group">
            <label for="last-name">last name</label>
            <input type="text" id="last-name" name="last-name" class="styled-input" placeholder="hackclubber">
          </div>
        </div>

        <div class="form-group">
          <label for="birthday">birthday</label>
          <input type="date" id="birthday" name="birthday" class="styled-input">
        </div>

        <div class="form-group">
          <label for="github-username">github username</label>
          <input type="text" id="github-username" name="github-username" class="styled-input" placeholder="orpheusthedino">
        </div>

        <div class="form-group">
          <label for="how-heard">how did you hear about this?</label>
          <textarea id="how-heard" name="how-heard" class="styled-textarea" placeholder="friends, #announcements, etc"></textarea>
        </div>

        <div class="form-group">
          <label for="doing-well">what are we doing well?</label>
          <textarea id="doing-well" name="doing-well" class="styled-textarea" placeholder="which part of roulette do you like? :)"></textarea>
        </div>

        <div class="form-group">
          <label for="improve">how can we improve?</label>
          <textarea id="improve" name="improve" class="styled-textarea" placeholder="what could make the experience better?"></textarea>
        </div>

        <div class="form-group">
          <label for="address-line1">address line 1</label>
          <input type="text" id="address-line1" name="address-line1" class="styled-input" placeholder="street address, apartment, etc.">
        </div>

        <div class="form-group">
          <label for="address-line2">address line 2</label>
          <input type="text" id="address-line2" name="address-line2" class="styled-input" placeholder="apartment, suite, unit, etc. (optional)">
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="city">city</label>
            <input type="text" id="city" name="city" class="styled-input">
          </div>
          <div class="form-group">
            <label for="state-province">state/province</label>
            <input type="text" id="state-province" name="state-province" class="styled-input">
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="country">country</label>
            <input type="text" id="country" name="country" class="styled-input">
          </div>
          <div class="form-group">
            <label for="zipcode">zip/postal code</label>
            <input type="text" id="zipcode" name="zipcode" class="styled-input">
          </div>
        </div>


        <div class="form-actions">
          <button type="submit" class="save-btn linkbutton">save</button>
        </div>
      </form>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.details-form');
    const saveBtn = document.querySelector('.save-btn');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Validate required fields
      const requiredFields = [
        'first-name',
        'last-name', 
        'birthday',
        'github-username',
        'how-heard',
        'doing-well',
        'improve',
        'address-line1',
        'city',
        'state-province',
        'country',
        'zipcode'
      ];

      let isValid = true;
      const missingFields = [];

      requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (!field.value.trim()) {
          isValid = false;
          missingFields.push(fieldId.replace('-', ' '));
        }
      });

      if (!isValid) {
        alert(`Please fill in all required fields: ${missingFields.join(', ')}`);
        return;
      }

      // Collect form data
      const formData = {
        firstname: document.getElementById('first-name').value.trim(),
        lastname: document.getElementById('last-name').value.trim(),
        birthday: document.getElementById('birthday').value,
        githubusername: document.getElementById('github-username').value.trim(),
        hearabout: document.getElementById('how-heard').value.trim(),
        doingwell: document.getElementById('doing-well').value.trim(),
        improve: document.getElementById('improve').value.trim(),
        addr1: document.getElementById('address-line1').value.trim(),
        addr2: document.getElementById('address-line2').value.trim() || '', // Optional
        city: document.getElementById('city').value.trim(),
        state: document.getElementById('state-province').value.trim(),
        country: document.getElementById('country').value.trim(),
        zipcode: document.getElementById('zipcode').value.trim()
      };

      // Disable save button and show loading state
      saveBtn.disabled = true;
      saveBtn.textContent = 'saving...';

      try {
        const response = await fetch('/api/settings/update-details', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(formData)
        });

        if (!response.ok) {
          throw new Error(`Failed to save: ${response.status}`);
        }

        // Success - redirect to settings page
        window.location.href = '/settings';
        
      } catch (error) {
        console.error('Error saving details:', error);
        alert('Failed to save details. Please try again.');
        
        // Re-enable save button
        saveBtn.disabled = false;
        saveBtn.textContent = 'save';
      }
    });
  });
</script>

<style>
main {
  padding: 40px;
  max-width: 800px;
  margin: 0 auto;
}

.details-container {
  margin-top: 40px;
  width: 100%;
}

h1 {
  color: var(--pink);
  margin-bottom: 32px;
  text-align: center;
}

.section-description {
  color: var(--pink);
  opacity: 0.8;
  margin-bottom: 32px;
  font-style: italic;
  text-align: center;
}

.details-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 24px;
  border: 2px solid var(--pink);
  border-radius: 12px;
  background: rgba(0, 0, 0, 0.4);
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

label {
  color: var(--pink);
  font-weight: 600;
  font-size: 0.95em;
}

.styled-input,
.styled-textarea {
  padding: 12px 16px;
  border: 2px solid var(--pink);
  border-radius: 8px;
  background: rgba(0, 0, 0, 0.8);
  color: var(--pink);
  font-size: 16px;
  transition: all 0.2s ease;
  box-sizing: border-box;
}

.styled-input:focus,
.styled-textarea:focus {
  outline: none;
  border-color: #ff8aa3;
  box-shadow: 0 0 0 3px rgba(255, 105, 138, 0.1);
}

.styled-textarea {
  min-height: 100px;
  resize: vertical;
  font-family: inherit;
}

.form-actions {
  display: flex;
  justify-content: center;
  margin-top: 16px;
}

.save-btn {
  background: var(--pink);
  color: #000;
  border: none;
  padding: 12px 32px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.save-btn:hover {
  background: #ff8aa3;
  transform: translateY(-2px);
}

.save-btn:active {
  transform: translateY(0);
}

@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  main {
    padding: 20px;
  }
}
</style>
